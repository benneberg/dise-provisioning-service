Recommended Verification Steps
Verify Authorized JavaScript Origins:
Go to your OAuth 2.0 client details (the page you are currently viewing).
Under "Authorized JavaScript origins," ensure https://benneberg.github.io is listed. If not, add it and click "Save."
Ensure Domain-Wide Delegation Setup:
Create a Service Account (if you haven't already): In your Google Cloud project, go to IAM & Admin -> Service Accounts. Create a new service account.
Enable Domain-Wide Delegation for the Service Account:
After creating the service account, click on it, go to "Keys," and create a new JSON key. Download this key.
In the Google Cloud console, go to API & Services -> Credentials. Find your service account's client ID (a long number).
Now, you need to provide this client ID and the necessary OAuth scopes to your partner's Google Workspace administrator. They must then grant access to this service account in their Google Workspace Admin console under "Security" -> "API controls" -> "Domain-wide Delegation." The scopes should include those needed for the Admin SDK Directory API (e.g., https://www.googleapis.com/auth/admin.directory.customer , https://www.googleapis.com/auth/admin.directory.user ) and potentially IAM-related scopes.
Your Application's Code: Your app's backend logic (where service account creation happens) should use this service account key to perform actions on behalf of the partner's domain, impersonating the partner's super admin.
Check IAM Roles for Service Account Creation:
In your Google Cloud project ( dise-provisioning-service ), go to IAM & Admin -> IAM.
Ensure the service account your application uses for creating the new service accounts has roles like Service Account Admin and Service Account Key Admin . These roles allow it to create and manage service accounts and their keys.
Confirm Partner is a Super Admin:
Instruct your partners to ensure they are logging in with an account that has Super Admin privileges in their Google Workspace domain. This is often a root cause of permission errors when interacting with admin-level APIs.
Review Organization Policies (if applicable):
If you have organization policies configured, check for any constraints that might restrict service account creation or key generation. This is less common for development but can occur in highly controlled environments.
It's likely that the "Invalid Customer Id" error stems from either insufficient permissions through Domain-Wide Delegation or the account used for authentication not being a Super Admin. The frontend OAuth client config is mostly for successful login, but the backend actions require the DWD setup.












How to set up the oAuth Client ID for this app

Part 1: Create an OAuth Client ID

Go to the Google Cloud Console

https://console.cloud.google.com/

Select or create a project

At the top left, click the project dropdown.

Choose an existing project or click “New Project” to make a new one.

Go to the OAuth consent screen

Left menu → APIs & Services → OAuth consent screen

Choose External (if you’ll be using Google accounts outside your organization).

Fill in:

App name: e.g. “Benneberg GitHub App”

User support email

Developer contact info

Save and continue through scopes and test users (you can skip adding scopes now).

Submit for verification (if needed later).

Create OAuth client credentials

Left menu → APIs & Services → Credentials

Click + Create Credentials → OAuth client ID

Choose:

Application type: Web application

Name: something descriptive (e.g. “GitHub Pages Auth”)

Authorized JavaScript origins:

https://benneberg.github.io


Authorized redirect URIs:
You can add a callback path for your app, for example:

https://benneberg.github.io/<your-repo-name>/oauth2callback


Replace <your-repo-name> with the actual path of your GitHub Pages repo (e.g. /myapp).

Click Create.

Copy the credentials

You’ll get a Client ID (and optionally a Client Secret).

Keep these — you’ll need them in your app’s config or .env file.

⚙️ Part 2: Enable the Required APIs

Go to APIs & Services → Library

Search and enable each of the following:

Admin SDK API

IAM API

(Just click into each, then click the blue Enable button.)

✅ Summary
Step	Action	Location
1	Create OAuth client	Google Cloud Console → Credentials
2	Add origin https://benneberg.github.io	Authorized JS origins
3	Add redirect URI	https://benneberg.github.io/<repo>/oauth2callback
4	Enable APIs	Admin SDK, IAM
